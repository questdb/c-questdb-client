[package]
name = "questdb-rs"
version = "5.0.0"
edition = "2021"
license = "Apache-2.0"
description = "QuestDB Client Library for Rust"
homepage = "https://questdb.io/"
repository = "https://github.com/questdb/c-questdb-client"
keywords = ["questdb", "ilp", "client-library"]
categories = ["database"]
authors = ["Adam Cimarosti <adam@questdb.io>"]

[package.metadata.docs.rs]
features = ["almost-all-features"]

[lib]
name = "questdb"
crate-type = ["lib"]

[dependencies]
libc = "0.2"
socket2 = { version = "0.5.5", optional = true }
dns-lookup = "2.0.4"
base64ct = { version = "1.7", features = ["alloc"] }
rustls-pemfile = "2.0.0"
ryu = { version = "1.0" }
itoa = "1.0"
aws-lc-rs = { version = "1.13", optional = true }
ring = { version = "0.17.14", optional = true }
rustls-pki-types = "1.0.1"
rustls = { version = "0.23.25", default-features = false, features = ["logging", "std", "tls12"] }
rustls-native-certs = { version = "0.8.1", optional = true }
webpki-roots = { version = "1.0.1", default-features = false, optional = true }
chrono = { version = "0.4.40", optional = true }

# We need to limit the `ureq` version to 3.0.x since we use
# the `ureq::unversioned` module which does not respect semantic versioning.
ureq = { version = "3.0.10, <3.1.0", default-features = false, features = ["rustls-no-provider"], optional = true }

tokio = { version = "1.45.1", default-features = false, features = ["net"], optional = true }
tokio-rustls = { version = "0.26.2", default-features = false, optional = true }
#hyper = { version = "1.6.0", default-features = false, optional = true }
#http-body-util = { version = "0.1.3", optional = true }
#hyper-util = { version = "0.1.14", optional = true, features = ["client", "client-legacy", "http1"] }
reqwest = { version = "0.12", default-features = false, features = ["rustls-tls"], optional = true }
lasso = { version = "0.7.3", features = ["multi-threaded"], optional = true }
crossbeam-queue = { version = "0.3.12", optional = true }

serde_json = { version = "1", optional = true }
questdb-confstr = "0.1.1"
rand = { version = "0.9.0", optional = true }
ndarray = { version = "0.16", optional = true }

[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.9", features = ["ws2def"] }

[build-dependencies]
serde_json = { version = "1.0.108" }
serde = { version = "1.0.193", features = ["derive"] }
slugify = "0.1.0"
indoc = "2"

[dev-dependencies]
mio = { version = "1", features = ["os-poll", "net"] }
chrono = "0.4.31"
tempfile = "3"
webpki-roots = "1.0.1"
rstest = "0.25.0"

[features]
default = ["sync-sender", "tls-webpki-certs", "ring-crypto"]

## Sync ILP/TCP + ILP/HTTP Sender
sync-sender = ["sync-sender-tcp", "sync-sender-http"]

## Sync ILP/TCP
sync-sender-tcp = ["_sync-sender", "_sender-tcp", "dep:socket2"]

## Sync ILP/HTTP
sync-sender-http = ["_sync-sender", "_sender-http", "dep:ureq", "dep:serde_json", "dep:rand"]

## Async ILP/HTTP Sender
async-sender-http = [
    "_async-sender",
    "_sender-http",
    "dep:tokio",
    "dep:tokio-rustls",
    "dep:reqwest",
    "dep:lasso",
    "dep:crossbeam-queue"]

## Compatiblity alias.
ilp-over-http = ["sync-sender-tcp"]

## Allow use OS-provided root TLS certificates
tls-native-certs = ["dep:rustls-native-certs"]

## Allow use of the `webpki-roots` crate to validate TLS certificates.
tls-webpki-certs = ["dep:webpki-roots"]

## Use `aws-lc-rs` as the cryto library.
aws-lc-crypto = ["dep:aws-lc-rs", "rustls/aws-lc-rs"]

## Use `ring` as the crypto library.
ring-crypto = ["dep:ring", "rustls/ring"]

## Allow skipping verification of insecure certificates.
insecure-skip-verify = []

## Enable code-generation in `build.rs` for additional tests.
json_tests = []

## Enable methods to create timestamp objects from chrono::DateTime objects.
chrono_timestamp = ["chrono"]

# Hidden derived features, used in code to enable-disable code sections. Don't use directly.
_sender-tcp = [] # equiv of any(sync-sender-tcp, async-sender-tcp)
_sender-http = [] # equiv of any(sync-sender-http, async-sender-http)
_sync-sender = [] # equiv of any(sync-sender-tcp, sync-sender-http)
_async-sender = [] # equiv of any(async-sender-tcp, async-sender-http)

## Enable all cross-compatible features.
## The `aws-lc-crypto` and `ring-crypto` features are mutually exclusive,
## thus compiling with `--all-features` will not work.
## Instead use `--features almost-all-features`.
## This is useful for quickly running `cargo test` or `cargo clippy`.
almost-all-features = [
    "sync-sender",
    "tls-webpki-certs",
    "tls-native-certs",
    "ring-crypto",
    "insecure-skip-verify",
    "json_tests",
    "chrono_timestamp",
    "ndarray"
]

[[example]]
name = "basic"
required-features = ["chrono_timestamp", "ndarray"]

[[example]]
name = "auth"
required-features = ["chrono_timestamp"]

[[example]]
name = "auth_tls"
required-features = ["chrono_timestamp"]

[[example]]
name = "http"
required-features = ["sync-sender-http", "ndarray"]

[[example]]
name = "protocol_version"
required-features = ["sync-sender-http", "ndarray"]
